#!/bin/bash

if [ "$DEBUG" == "1" ]; then
    set -x
fi

if [ "$2" == "" ]; then
    echo "usage: $(basename $0) DEPLOYMENT_CONFIG_FILE DROPLET_NAME"
    exit 1
fi

DEPLOYMENT_CONFIG=$1
DROPLET_NAME=$2

MACHINE_IMAGE=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine']['image'])")
MACHINE_SIZE=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine']['size'])")
MACHINE_REGION=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine']['region'])")
MACHINE_FLOATING_IP=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine'].get('floating_ip', ''))")
MACHINE_FLOATING_IP_OUTBOUND_TRAFFIC=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine'].get('floating_ip_outbound_traffic', False))")
MACHINE_DO_AUTH_CONTEXT=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine'].get('do_auth_context', ''))")
MACHINE_DO_METRICS_AGENT=$(cat $DEPLOYMENT_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['machine'].get('do_metrics_agent', False))")

if [ "$(which doctl)" == "" ]; then
    echo "error: doctl is not installed, cannot create droplets."
    exit 1
elif [ "$MACHINE_IMAGE" == "" ]; then
    echo "error: machine.image must be set in deployment config"
    exit 1
elif [ "$MACHINE_SIZE" == "" ]; then
    echo "error: machine.size must be set in deployment config"
    exit 1
elif [ "$MACHINE_REGION" == "" ]; then
    echo "error: machine.region must be set in deployment config"
    exit 1
fi

if [ "$MACHINE_DO_AUTH_CONTEXT" != "" ]; then
    if [ "$(doctl auth list | grep -c $MACHINE_DO_AUTH_CONTEXT)" == "0" ]; then
        echo "error: machine.do_auth_context specifies unknown auth context \"$MACHINE_DO_AUTH_CONTEXT\"" >&2
        exit 1
    fi
    doctl auth switch --context $MACHINE_DO_AUTH_CONTEXT | grep -v "Now using context" >&2
    if [ "$(doctl auth list | grep '(current)' | grep -c $MACHINE_DO_AUTH_CONTEXT)" == "0" ]; then
        echo "error: failed to set machine.do_auth_context (\"$MACHINE_DO_AUTH_CONTEXT\") as the current auth context" >&2
        exit 1
    fi

fi

echo "Will spawn droplet using auth context: $(doctl auth list | grep current)" >&2

DROPLET_DETAILS=$(doctl compute droplet create \
    --no-header \
    --format ID,PublicIPv4 \
    --ssh-keys $(ssh-keygen -E md5 -lf $HOME/.ssh/id_rsa.pub | grep -oE 'MD5[^ ]*' | cut -c5-) \
    --enable-ipv6 \
    --wait \
    --size $MACHINE_SIZE \
    --image $MACHINE_IMAGE \
    --region $MACHINE_REGION \
    $DROPLET_NAME)

DOCTL_EXIT_CODE=$?
if [ "$DOCTL_EXIT_CODE" != "0" ]; then
	echo "error: doctl exit with non-zero exit code: $DOCTL_EXIT_CODE"
	exit $DOCTL_EXIT_CODE
fi

DROPLET_ID=$(echo $DROPLET_DETAILS | cut -f 1 -d ' ')
DROPLET_IPV4=$(echo $DROPLET_DETAILS | cut -f 2 -d ' ')

while [ "$(ssh -q -o StrictHostKeyChecking=no -o ConnectTimeout=1 -o ConnectionAttempts=1 root@$DROPLET_IPV4 'echo online')" != "online" ]; do
        sleep 1
done

if [ "$MACHINE_FLOATING_IP" != "" ]; then
    # Assigning to a variable makes output visible when running with DEBUG=1
    # and prevents "floating-ip-action" output from reaching stdout (we only
    # want to print the ipv4 of the created machine).
    FLOATING_IP_ASSIGNMENT_OUTPUT=$(doctl compute floating-ip-action assign $MACHINE_FLOATING_IP $DROPLET_ID)
fi

if [ "$MACHINE_FLOATING_IP_OUTBOUND_TRAFFIC" == "True" ]; then
    ANCHOR_IP=$(ssh root@$DROPLET_IPV4 "curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/anchor_ipv4/gateway")
    ssh root@$DROPLET_IPV4 "echo 'network: {config: disabled}' > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
    ssh root@$DROPLET_IPV4 "cat /etc/netplan/50-cloud-init.yaml | python3 -c \"import yaml;import sys;y=yaml.safe_load(sys.stdin);next(r for r in y['network']['ethernets']['eth0']['routes'] if r['to'] == '0.0.0.0/0')['via'] = '"$ANCHOR_IP"'; print(yaml.dump(y, default_flow_style=False, sort_keys=False))\" > /etc/netplan/50-cloud-init.yaml.fixed ; mv /etc/netplan/50-cloud-init.yaml.fixed /etc/netplan/50-cloud-init.yaml ; netplan apply"
fi

if [ "$MACHINE_DO_METRICS_AGENT" == "True" ]; then
    DO_AGENT_INSTALL_OUTPUT=$(LC_ALL=en_US.UTF-8 ssh root@$DROPLET_IPV4 "curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash" 2>&1)
fi

echo $DROPLET_IPV4
